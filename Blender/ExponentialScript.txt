##### Script that copies cube and creates a left and right cube and then runs the exponential perspective changes on the scene #####

import bpy
import bmesh

# set object mode 
bpy.ops.object.mode_set(mode='OBJECT')

cube = bpy.data.objects.get("Cube")
scene = bpy.data.scenes.get("Scene")

# for left cube copy
mesh = bpy.data.meshes.new("leftCube")
# Create a new object.
leftCube = bpy.data.objects.new("leftCube", mesh)
leftCube.data = cube.data.copy()
leftCube.scale = cube.scale
leftCube.location = Vector((-2.0,0.0,0.0))
scene.objects.link(leftCube)
''' Code for deleting face off cube so you dont have to do it manually '''

#for right cube copy
mesh2 = bpy.data.meshes.new("rightCube")
# Create a new object.
rightCube = bpy.data.objects.new("rightCube", mesh2)
rightCube.data = cube.data.copy()
rightCube.scale = cube.scale
rightCube.location = Vector((2.0,0.0,0.0))
scene.objects.link(rightCube)
''' Code for deleting face off cube so you dont have to do it manually '''

# Exponential perspective script
for obj in bpy.data.objects:
    if (obj.type == 'MESH'):
        m0 = obj.location.x
        m1 = obj.location.y
        m2 = obj.location.z
        #mesh = obj.getData(mesh=1)
        for v in obj.data.vertices:
            x = v.co[0] + m0
            z = v.co[1] + m1
            y = v.co[2] + m2
            xp = x / pow(2,z/2)
            yp = y / pow(2,z/2)				
            # Leave as Orthographic
            v.co[0] = xp - m0
            v.co[2] = yp - m2                       				
            # Or.. Convert Back to perspective
            # xt = xp*z
            # yt = yp*z
            # v.co[0] = xt - m0
            # v.co[2] = yt - m2

##### END SCRIPT #####


